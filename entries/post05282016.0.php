<p>It's a been a while since I last wrote something, but it's been a busy week at my new internship with Qualtrics. Qualtrics is a software company that sells enterprise-grade market research tools. Their motto is "Making sophisticated research simple". Their product serves a global market and million interact with Qualtrics on a daily basis. This makes the company a great place to learn how to build systems that scale. Dealing with the scale at which a basic service (live survey taking) is used at an affordable cost is an art that Qualtrics Engineers practice everyday. The people at office are whimsical, smart, driven, and fun loving. Most of all they love the product, belive in it, and believe in their work, which is an incredible atmosphere to be in as a young software developer.</p>
<p>
<p>My project for the summer is building a URL shortener. The service is meant to take requests from clients for long, ugly, and unmanageable urls and return a token, or shorter URL that's much easier to remember and distribute. Then, when clients request that same URL later, they're redirected to the original URL, without worrying about the details behind the scenes of what URL they are accessing. This gives some advantages in security too, where the URL parameters are hidden by the token that is distributed. Only when the survey is accessed by an intended recipient is true URL revealed.</p>
<p>The project initially sounded pretty basic to me, and in fact I was a little taken back that I had been assigned such a basic project. A URL shortener does nothing more than hash a URL and save the hash as well as the original string for later request that access that URL. But diving a little deeper into the problem, you'll realize that this kind of service needs to be reliable, up <b>ALL</b> the time, and incredibly fast if you're going to put it in front of any service that people depend on. Especially in the online survey industry, the faster the survey can load, the more likely a respondent will actually go through with taking the survey. And while there are multiple factors that can affect a client's page load time, nothing that can be controlled is going to be slow, at least at Qualtrics.</p>
<p>Add to the requirements the realization that as a web service, this endpoint is going to be hit by multiple users potentially thousands if not millions of times a day around the globe, especially at the scale Qualtrics operates at. That means <i>concurrency</i> and <i>consistency</i> are major focuses. That is, if two people request a shortened token for different URLs at the same time, they should both get their requests processed correctly, and efficiently. And that goes for two, twenty, or two thousand concurrent requests. If someone in the USA creates a shortened link, immediately after creation, someone in China should be able to hit that link to get to the intended URL, not a few hours later.</p>
<p>Now, scale the problem to include multiple independent computers that are all acting as a Qualtrics servers in a datacenter. Given the number of requests that Qualtrics handles, it needs a datacenter to effectively handle the sheer volume of requests coming in. Typically, data centers use hundreds and even thousands of machines, called nodes, and a load balancer that routes incoming web traffic to be handled by one of these worker nodes. Since each node is a separate machine, now the solution has to work as if it was one program running on one machine, but actually operate in multiple instances across multiple machines in unison.</p>
<p>A final bit of complexity: Qualtrics currently operate out of multiple datacenters. Meaning the solution needs to be aware of all the data that creates at any data center, separated geographically by thousands of miles. That's the only way a client in the USA can create a survey and send it to a survey taker in China the next second while ensuring both of them have reasonable access to required data. This means the machines in each data center have to talk to each other and be globally aware.</p>
<p>Suddenly what seemed to be a simple implementation of a hash table turned into a distributed systems architecture problem. I'm in charge of creating a service that has to be a literal workhorse, and withstand some impressive usecases. I'm pretty satisfied with the project because it's not something that just applies to category or segment that Qualtrics targets, but is a real modern software problem that connects and simulates many of the problems that engineers deal with at almost any major enterprise software company. And for that I'm glad because 90% of what I'm going to learn here is going to be transferable skills, or "takeaways" that are going to develop me and my career, rather than instill a knowledge of a particular company's policies and development style.</p>